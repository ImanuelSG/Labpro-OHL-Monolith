// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Film {
  id              String   @id @default(cuid())
  title           String   @unique
  description     String
  director        String
  release_year    Int
  genre           String[]
  price           Int      @default(0)
  duration        Int
  ratingCount     Int      @default(0)
  rating          Float    @default(0)
  cover_image_url String?
  video_url       String
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  Transactions Transaction[]
  Reviews      Review[]
  Wishlist     Wishlist[]
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String @id @default(cuid())
  email          String @unique
  username       String @unique
  hashedPassword String
  firstName      String
  lastName       String
  balance        Int    @default(0)
  role           Role   @default(USER)

  TransactionsBought Transaction[]
  Reviews            Review[]
  Wishlist           Wishlist[]
}

model Transaction {
  id        String   @id @default(cuid())
  filmId    String
  userEmail String
  boughtAt  DateTime
  User      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  Film      Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
}

model Review {
  id       String @id @default(cuid())
  filmId   String
  username String
  Review   String
  Rating   Int
  User     User   @relation(fields: [username], references: [username], onDelete: Cascade)
  Film     Film   @relation(fields: [filmId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id     String @id @default(cuid())
  filmId String
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Film   Film   @relation(fields: [filmId], references: [id], onDelete: Cascade)
}
