// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Film {
  id           String   @id @default(cuid())
  title        String   @unique
  description  String
  director     String
  release_year Int
  genre        String[]
  price        Int      @default(0)
  duration     Int
  cover_image  String?
  video_url    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Transactions Transaction[]
  Reviews      Review[]
  Wishlist     Wishlist[]
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String        @id @default(cuid())
  email              String        @unique
  username           String        @unique
  hashedPassword     String
  firstName          String
  lastName           String
  balance            Int           @default(0)
  role               Role          @default(USER)
  TransactionsBought Transaction[]
  Reviews            Review[]
  Wishlist           Wishlist[]
  AccessToken        AccessToken?
}

model Transaction {
  id        String   @id @default(cuid())
  filmId    String
  userEmail String
  boughtAt  DateTime
  User      User     @relation(fields: [userEmail], references: [email])
  Film      Film     @relation(fields: [filmId], references: [id])
}

model Review {
  id        String @id @default(cuid())
  filmId    String
  userEmail String
  Review    String
  Rating    Int
  User      User   @relation(fields: [userEmail], references: [email])
  Film      Film   @relation(fields: [filmId], references: [id])
}

model Wishlist {
  id        String @id @default(cuid())
  filmId    String
  userEmail String
  User      User   @relation(fields: [userEmail], references: [email])
  Film      Film   @relation(fields: [filmId], references: [id])
}

model AccessToken {
  id        String   @id @default(cuid())
  token     String
  userEmail String   @unique
  User      User     @relation(fields: [userEmail], references: [email])
  createdAt DateTime @default(now())
  expiresAt DateTime
}
